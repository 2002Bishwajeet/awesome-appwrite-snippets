{
    "Initialize account": {
      "scope": "kotlin",
      "prefix": ["sAccount"],
      "body": ["val ${1:account} = Account(${2:client})"],
      "description": "Create a Account object and initialize it."
    },

    "Get Account": {
      "scope": "kotlin",
      "prefix": ["sGetAccount"],
      "body": ["val ${1:response} = account.get()"],
      "description": "Get currently logged in user data as JSON object."
    },
  
    "Get Account Preferences": {
      "scope": "kotlin",
      "prefix": ["sGetAccountPreferences", "sGetAccPrefs"],
      "body": ["val ${1:response} = account.getPrefs()"],
      "description": "Get currently logged in user preferences as a key-value object."
    },
  
    "List Account Sessions": {
      "scope": "kotlin",
      "prefix": ["sGetAccountSession", "sGetAccSession", "sListAccountSessions", "sListAccSessions"],
      "body": ["val ${1:response} = account.listSessions()"],
      "description": "Get currently logged in user list of active sessions across different devices."
    },
  
    "List Account Logs": {
      "scope": "kotlin",
      "prefix": ["sGetAccountLogs", "sGetAccLog", "sListAccountLogs", "sListAccLogs"],
      "body": [
        "val ${1:response} = account.listLogs(", 
        ")"
      ],
      "description": "Get currently logged in user list of latest security activity logs. Each log returns user IP address, location and date and time of log."
    },
  
    "Get Session by ID": {
      "scope": "kotlin",
      "prefix": ["sGetSessionId", "sGetSessionbyId"],
      "body": [
        "val ${1:response} = account.getSession(",
        "   sessionId = \"${2:sessionId}\"",
        ")"
      ],
      "description": "Use this endpoint to get a logged in user's session using a Session ID. Inputting 'current' will return the current session being used."
    },
  
    "Update Account Name": {
      "scope": "kotlin",
      "prefix": ["sUpdateName", "sUpName"],
      "body": [
        "val ${1:response} = account.updateName(",
        "   name = \"${2:name}\"",
        ")"
      ],
      "description": "Update currently logged in user account name."
    },
  
    "Update Account Password": {
      "scope": "kotlin",
      "prefix": ["sUpdatePassword", "sUpPass"],
      "body": [
        "val ${1:response} = account.updatePassword(",
        "   password = \"${2:password}\"",
        ")"
      ],
      "description": "Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth and Team Invites, oldPassword is optional."
    },
  
    "Update Account Email": {
      "scope": "kotlin",
      "prefix": ["sUpdateEmail", "sUpEmail"],
      "body": [
        "val ${1:response} = account.updateEmail(",
        "   email = \"${2:email@example.com}\",",
        "   password = \"${3:password}\"",
        ")"
      ],
      "description": "Update currently logged in user account email address. After changing user address, the user confirmation status will get reset. A new confirmation email is not sent automatically however you can use the send confirmation email endpoint again to send the confirmation email. For security measures, user password is required to complete this request."
    },
  
    "Update Account Phone": {
      "scope": "kotlin",
      "prefix": ["sUpdatePhone", "sUpPhone"],
      "body": [
        "val ${1:response} = account.updatePhone(",
        "   phone = \"${2:}\",",
        "   password = \"${3:password}\"",
        ")"
      ],
      "description": "Update the currently logged in user's phone number. After updating the phone number, the phone verification status will be reset. A confirmation SMS is not sent automatically, however you can use the POST /account/verification/phone endpoint to send a confirmation SMS."
    },
  
    "Update Account Preferences": {
      "scope": "kotlin",
      "prefix": ["sUpPrefs", "sUpPref"],
      "body": [
        "val ${1:response} = account.updatePrefs(",
        "   prefs = mapOf( \"${2:a}\" to \"${3:b}\" )",
        ")"
      ],
      "description": "Update currently logged in user account preferences. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded."
    },
  
    "Update Account Status": {
      "scope": "kotlin",
      "prefix": ["sUpdateAccountStatus", "sUpAccStatus"],
      "body": ["val ${1:response} = account.updateStatus()"
      ],
      "description": "Block the currently logged in user account. Behind the scene, the user record is not deleted but permanently blocked from any access. To completely delete a user, use the Users API instead."
    },
    
    "Delete Account Session": {
      "scope": "kotlin",
      "prefix": ["sDeleteAccountSession", "sDelAccSession"],
      "body": [
        "val ${1:response} = account.deleteSession(",
        "   sessionId = \"${2:sessionId}\"",
        ")"
      ],
      "description": "Use this endpoint to log out the currently logged in user from all their account sessions across all of their different devices. When using the option id argument, only the session unique ID provider will be deleted."
    },

    "Update Account Session (Refresh Tokens)": {
      "scope": "kotlin",
      "prefix": ["sUpdateAccountSession", "sUpAccSession"],
      "body": [
        "val ${1:response} = account.updateSession(",
        "   sessionId = \"${2:sessionId}\"",
        ")"
      ],
      "description": "Access tokens have limited lifespan and expire to mitigate security risks. If session was created using an OAuth provider, this route can be used to \"refresh\" the access token."
    },
    "Delete All Account Sessions": {
      "scope": "kotlin",
      "prefix": ["sDeleteAccountSessions", "sDelAccSessions"],
      "body": ["val ${1:response} = account.deleteSessions()"],
      "description": "Delete all sessions from the user account and remove any sessions cookies from the end client."
    },
  
    "Create Password Recovery": {
      "scope": "kotlin",
      "prefix": ["sRecPassword", "sCrRecovery"],
      "body": [
        "val ${1:response} = account.createRecovery(",
        "   email = \"${2:email}\",",
        "   url = \"${3:url}\"",
        ")"
      ],
      "description": "Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the PUT /account/recovery endpoint to complete the process. The verification link sent to the user's email address is valid for 1 hour."
    },
  
    "Create Password Recovery(confirmation)": {
      "scope": "kotlin",
      "prefix": ["sUpRecovery", "sUpdateRecovery"],
      "body": [
        "val ${1:response} = account.updateRecovery(",
        "   userId = \"${2:unique()}\",",
        "   secret = \"${3:secret}\",",
        "   password = \"${4:password}\",",
        "   passwordAgain = \"${5:password}\"",
        ")"
      ],
      "description": "Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the PUT /account/recovery endpoint to complete the process. The verification link sent to the user's email address is valid for 1 hour."
    },
  
    "Create Email Verification": {
      "scope": "kotlin",
      "prefix": ["sEmailVerification", "sCrEmailVerification"],
      "body": [
        "val ${1:response} = account.createVerification(",
        "   url = \"${2:url}\"",
        ")"
      ],
      "description": "Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the userId and secret arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the userId and secret parameters. Learn more about how to complete the verification process. The verification link sent to the user's email address is valid for 7 days."
    },
  
    "Create Email Verification (confirmation)": {
      "scope": "kotlin",
      "prefix": ["sEmailVerificationconfirmation", "sCrEmailVerificationconfirm"],
      "body": [
        "val ${1:response} = account.updateVerification(",
        "   userId = \"${2:unique()}\",",
        "   secret = \"${3:secret}\"",
        ")"
      ],
      "description": "Use this endpoint to complete the user email verification process. Use both the userId and secret parameters that were attached to your app URL to verify the user email ownership. If confirmed this route will return a 200 status code."
    },
  
    "Create Phone Verification": {
      "scope": "kotlin",
      "prefix": ["sPhoneVerification", "sCrPhoneVerification"],
      "body": ["val ${1:response} = account.createPhoneVerification()"],
      "description": "Use this endpoint to send a verification SMS to the currently logged in user. This endpoint is meant for use after updating a user's phone number using the accountUpdatePhone endpoint. Learn more about how to complete the verification process. The verification code sent to the user's phone number is valid for 15 minutes."
    },
  
    "Create Phone Verification(confirmation)": {
      "scope": "kotlin",
      "prefix": ["sPhoneVerificationconfirmation", "sCrPhoneVerificationconfirm"],
      "body": [
        "val ${1:response} = account.updatePhoneVerification(",
        "   userId = \"${2:unique()}\",",
        "   secret: \"${3:secret}\"",
        ")"
      ],
      "description": "Use this endpoint to complete the user phone verification process. Use the userId and secret that were sent to your user's phone number to verify the user email ownership. If confirmed this route will return a 200 status code."
    }
  }
  