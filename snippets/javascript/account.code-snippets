{
  "Initialize account": {
    "scope": "javascript",
    "prefix": "account",
    "body": ["const account = new Account(client);"],
    "description": "Create a Account object and initialize it."
  },
  "Create account": {
    "scope": "javascript",
    "prefix": ["crAccount", "createAcount"],
    "body": [
      "const response = await account.create(\"${1:userId}\",\"${2:email}\",\"${3:password}\");"
    ],
    "description": "Create a new Account"
  },

  "Create account Session with Email": {
    "scope": "javascript",
    "prefix": [
      "crsAccount",
      "createAccountSession",
      "createSession",
      "crsession"
    ],
    "body": [
      "const response = await account.createEmailSession(\"${1:email}\", \"${2:password}\");"
    ],
    "description": "Create a new Account Session"
  },

  "Create account Session with OAuth2": {
    "scope": "javascript",
    "prefix": ["crsessionOAuth2"],
    "body": [
      "const response = await account.createOAuth2Session(provider: \"${1:provider}\");"
    ],
    "description": "Create a new Account Session with OAuth2"
  },

  "Create Magic Url session": {
    "scope": "javascript",
    "prefix": [
      "crsAccount",
      "createSessionAccount",
      "magicUrl",
      "mgURLSession"
    ],
    "body": [
      "const response = await account.createMagicURLSession(userId: \"${1:userId}\", email:  \"${1:email}\");"
    ],
    "description": "Create a new account session with Magic Url"
  },
  "Update Magic Url session": {
    "scope": "javascript",
    "prefix": ["upMagicUrl", "updatemagicUrl", "mgURLSession"],
    "body": [
      "const response = await account.updateMagicURLSession(userId: '$1', secret: '$2');"
    ],
    "description": "Update Magic URL session"
  },

  "Create Phone session": {
    "scope": "javascript",
    "prefix": ["crsPhone", "createPhoneSession"],
    "body": [
      "const response = await account.createPhoneSession(userId: '$1', number: '$2');"
    ],
    "description": "Create a new Phone session"
  },

  "Update Phone session": {
    "scope": "javascript",
    "prefix": ["upPhone", "updatePhoneSession"],
    "body": [
      "const response = await account.updatePhoneSession(userId: '$1', number: '$2');"
    ],
    "description": "Create a new Phone session"
  },

  "Create Anonymous session": {
    "scope": "javascript",
    "prefix": ["crsAccount", "crAnonymous", "createAnonymousSession"],
    "body": ["const response = await account.createAnonymousSession();"],
    "description": "Create a new Anonymous Session"
  },

  "Create JWT": {
    "scope": "javascript",
    "prefix": ["crJWT", "JWT"],
    "body": ["const response = await account.createJWT();"],
    "description": "Create a new Account using JWT"
  },

  "Get Account": {
    "scope": "javascript",
    "prefix": ["getAccount"],
    "body": ["const User? user = await account.get();"],
    "description": "Get currently logged in user data as JSON object."
  },

  "Get Account Preferences": {
    "scope": "javascript",
    "prefix": ["getAccountPreferences", "getAccPrefs"],
    "body": ["const response = await account.getPrefs();"],
    "description": "Get currently logged in user preferences as a key-value object."
  },

  "Get Account Sessions": {
    "scope": "javascript",
    "prefix": ["getAccountSession", "getAccSession"],
    "body": ["const response = await account.getSessions();"],
    "description": "Get currently logged in user list of active sessions across different devices."
  },

  "Get Account Logs": {
    "scope": "javascript",
    "prefix": ["getAccountLogs", "getAccLog"],
    "body": ["const response = await account.getLogs();"],
    "description": "Get currently logged in user list of latest security activity logs. Each log returns user IP address, location and date and time of log."
  },

  "Get Session by ID": {
    "scope": "javascript",
    "prefix": ["getSessionId", "getSessionbyId"],
    "body": ["const response = await account.getSesssion(sessionId: '$1');"],
    "description": "Use this endpoint to get a logged in user's session using a Session ID. Inputting 'current' will return the current session being used."
  },

  "Update Account Name": {
    "scope": "javascript",
    "prefix": ["updateName", "upName"],
    "body": ["const response = await account.updateName(name: '$1');"],
    "description": "Update currently logged in user account name."
  },

  "Update Account Password": {
    "scope": "javascript",
    "prefix": ["updatePassword", "upPass"],
    "body": ["const response = await account.updatePassword(password: '$1');"],
    "description": "Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth and Team Invites, oldPassword is optional."
  },

  "Update Account Email": {
    "scope": "javascript",
    "prefix": ["updateEmail", "upEmail"],
    "body": [
      "const response = await account.updateEnail(email: '$1', password: '$2');"
    ],
    "description": "Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth and Team Invites, oldPassword is optional."
  },

  "Update Account Preferences": {
    "scope": "javascript",
    "prefix": ["updatePreferences", "upPrefs", "upPref", "upPreferences"],
    "body": ["const response = await account.updatePrefs(prefs: {$1});"],
    "description": "Update currently logged in user account preferences. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded."
  },

  "Delete Account": {
    "scope": "javascript",
    "prefix": ["deleteAccount", "delAcc"],
    "body": ["await account.delete();"],
    "description": "Delete a currently logged in user account. Behind the scene, the user record is not deleted but permanently blocked from any access. This is done to avoid deleted accounts being overtaken by new users with the same email address. Any user-related resources like documents or storage files should be deleted separately."
  },

  "Delete Account Session": {
    "scope": "javascript",
    "prefix": ["deleteAccountSession", "delAccSession"],
    "body": ["await account.deleteSession(sessionId: '$1');"],
    "description": "Use this endpoint to log out the currently logged in user from all their account sessions across all of their different devices. When using the option id argument, only the session unique ID provider will be deleted."
  },

  "Delete All Account Sessions": {
    "scope": "javascript",
    "prefix": ["deleteAccountSessions", "delAccSessions"],
    "body": ["await account.deleteSessions();"],
    "description": "Delete all sessions from the user account and remove any sessions cookies from the end client."
  },

  "Create Password Recovery": {
    "scope": "javascript",
    "prefix": ["recPassword", "crRecovery"],
    "body": [
      "const response = await account.createRecovery(email: '$1', url:'$2');"
    ],
    "description": "Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the PUT /account/recovery endpoint to complete the process. The verification link sent to the user's email address is valid for 1 hour."
  },

  "Create Password Recovery(confirmation)": {
    "scope": "javascript",
    "prefix": ["upRecovery", "updateRecovery"],
    "body": [
      "const response = await account.updateRecovery(userId: '$1', secret:'$2',password: '$3',passwordAgain:'$4');"
    ],
    "description": "Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the PUT /account/recovery endpoint to complete the process. The verification link sent to the user's email address is valid for 1 hour."
  },

  "Create Email Verification": {
    "scope": "javascript",
    "prefix": ["emailVerification", "crEmailVerification"],
    "body": ["const response = await account.createVerification(url: '$1');"],
    "description": "Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the userId and secret arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the userId and secret parameters. Learn more about how to complete the verification process. The verification link sent to the user's email address is valid for 7 days."
  },

  "Create Email Verification(confirmation)": {
    "scope": "javascript",
    "prefix": ["emailVerificationconfirmation", "crEmailVerificationconfirm"],
    "body": [
      "const response = await account.updateVerification(userId: '$1',secret: '$2');"
    ],
    "description": "Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the userId and secret arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the userId and secret parameters. Learn more about how to complete the verification process. The verification link sent to the user's email address is valid for 7 days."
  },

  "Create Phone Verification": {
    "scope": "javascript",
    "prefix": ["phoneVerification", "crPhoneVerification"],
    "body": ["const response = await account.createPhoneVerification();"],
    "description": "Use this endpoint to send a verification SMS to the currently logged in user. This endpoint is meant for use after updating a user's phone number using the accountUpdatePhone endpoint. Learn more about how to complete the verification process. The verification code sent to the user's phone number is valid for 15 minutes."
  },

  "Create Phone Verification(confirmation)": {
    "scope": "javascript",
    "prefix": ["phoneVerificationconfirmation", "crPhoneVerificationconfirm"],
    "body": [
      "const response = await account.updatePhoneVerification(userId: '$1',secret: '$2');"
    ],
    "description": "Use this endpoint to complete the user phone verification process. Use the userId and secret that were sent to your user's phone number to verify the user email ownership. If confirmed this route will return a 200 status code."
  }
}
