{
  "Initialize account": {
    "scope": "dart",
    "prefix": ["account"],
    "body": ["final Account ${1:account} = Account(client);"],
    "description": "Create a Account object and initialize it."
  },

  "Create account": {
    "scope": "dart",
    "prefix": ["crAccount", "createAccount"],
    "body": [
      "final ${1:account} = await account.create(userId: '${2:unique()}', email: '${3:email}', password: '${4:password}');"
    ],
    "description": "Allow a new user to register a new account in your project."
  },

  "Create account Session with Email": {
    "scope": "dart",
    "prefix": ["crsemail", "createEmailSession"],
    "body": [
      "final ${1:session} = await account.createEmailSession( email: '${2:email}', password: '${3:password}');"
    ],
    "description": "Create a new Account Session"
  },

  "Create account Session with OAuth2": {
    "scope": "dart",
    "prefix": ["crsessionOAuth2"],
    "body": [
      "final ${1:response} = await account.createOAuth2Session(provider: '${2:provider}');"
    ],
    "description": "Create a new Account Session with OAuth2"
  },

  "Create Magic Url session": {
    "scope": "dart",
    "prefix": ["magicUrl", "mgURLSession"],
    "body": [
      "final ${1:response} = await account.createMagicURLSession(userId: '${1:unique()}', email: '${2:email}');"
    ],
    "description": "Sends the user an email with a secret key for creating a session. When the user clicks the link in the email, the user is redirected back to the URL you provided with the secret key and userId values attached to the URL query string. "
  },
  "Update Magic Url session": {
    "scope": "dart",
    "prefix": ["upMagicUrl", "updatemagicUrl", "mgURLSession"],
    "body": [
      "final ${1:response} = await account.updateMagicURLSession(userId: '${2:unique()}', secret: '${3:secret-key}');"
    ],
    "description": "Update Magic URL session"
  },

  "Create Phone session": {
    "scope": "dart",
    "prefix": ["crsPhone", "createPhoneSession"],
    "body": [
      "final ${1:response} = await account.createPhoneSession(userId: '${2:unique()}', number: '${3:number}');"
    ],
    "description": "Create a new Phone session"
  },

  "Update Phone session": {
    "scope": "dart",
    "prefix": ["upPhone", "updatePhoneSession"],
    "body": [
      "final ${1:response} = await account.updatePhoneSession(userId: '${2:unique()}', number: '${3:number');"
    ],
    "description": "Update the Phone session"
  },

  "Create Anonymous session": {
    "scope": "dart",
    "prefix": ["crsAccount", "crAnonymous", "createAnonymousSession"],
    "body": ["final ${1:response} = await account.createAnonymousSession();"],
    "description": "Create a new Anonymous Session"
  },

  "Create JWT": {
    "scope": "dart",
    "prefix": ["crJWT", "JWT"],
    "body": ["final ${1:response} = await account.createJWT();"],
    "description": "Create a new Account using JWT"
  },

  "Get Account": {
    "scope": "dart",
    "prefix": ["getAccount"],
    "body": ["final ${1:user} = await account.get();"],
    "description": "Get currently logged in user data as JSON object."
  },

  "Get Account Preferences": {
    "scope": "dart",
    "prefix": ["getAccountPreferences", "getAccPrefs"],
    "body": ["final ${1:response} = await account.getPrefs();"],
    "description": "Get currently logged in user preferences as a key-value object."
  },

  "Get Account Sessions": {
    "scope": "dart",
    "prefix": ["getAccountSession", "getAccSession"],
    "body": ["final ${1:response} = await account.getSessions();"],
    "description": "Get currently logged in user list of active sessions across different devices."
  },

  "Get Account Logs": {
    "scope": "dart",
    "prefix": ["getAccountLogs", "getAccLog"],
    "body": ["final ${1:response} = await account.getLogs();"],
    "description": "Get currently logged in user list of latest security activity logs. Each log returns user IP address, location and date and time of log."
  },

  "Get Session by ID": {
    "scope": "dart",
    "prefix": ["getSessionId", "getSessionbyId"],
    "body": [
      "final ${1:response} = await account.getSesssion(sessionId: '${1:sessionId}');"
    ],
    "description": "Use this endpoint to get a logged in user's session using a Session ID. Inputting 'current' will return the current session being used."
  },

  "Update Account Name": {
    "scope": "dart",
    "prefix": ["updateName", "upName"],
    "body": [
      "final ${1:response} = await account.updateName(name: '${2:name}');"
    ],
    "description": "Update currently logged in user account name."
  },

  "Update Account Password": {
    "scope": "dart",
    "prefix": ["updatePassword", "upPass"],
    "body": [
      "final ${1:response} = await account.updatePassword(password: '${2:password}');"
    ],
    "description": "Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth and Team Invites, oldPassword is optional."
  },

  "Update Account Email": {
    "scope": "dart",
    "prefix": ["updateEmail", "upEmail"],
    "body": [
      "final ${1:response} = await account.updateEmail(email: '${2:email}', password: '${3:password}');"
    ],
    "description": "Update currently logged in user account email address. After changing user address, the user confirmation status will get reset. A new confirmation email is not sent automatically however you can use the send confirmation email endpoint again to send the confirmation email. For security measures, user password is required to complete this request."
  },

  "Update Account Preferences": {
    "scope": "dart",
    "prefix": ["upPrefs", "upPref"],
    "body": ["final ${1:response} = await account.updatePrefs(prefs: {$2});"],
    "description": "Update currently logged in user account preferences. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded."
  },


  "Delete Account Session": {
    "scope": "dart",
    "prefix": ["deleteAccountSession", "delAccSession"],
    "body": ["await account.deleteSession(sessionId: '${1:sessionId}');"],
    "description": "Use this endpoint to log out the currently logged in user from all their account sessions across all of their different devices. When using the option id argument, only the session unique ID provider will be deleted."
  },

  "Delete All Account Sessions": {
    "scope": "dart",
    "prefix": ["deleteAccountSessions", "delAccSessions"],
    "body": ["await account.deleteSessions();"],
    "description": "Delete all sessions from the user account and remove any sessions cookies from the end client."
  },

  "Create Password Recovery": {
    "scope": "dart",
    "prefix": ["recPassword", "crRecovery"],
    "body": [
      "final ${1:response} = await account.createRecovery(email: '${2:email}', url:'${3:url}');"
    ],
    "description": "Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the PUT /account/recovery endpoint to complete the process. The verification link sent to the user's email address is valid for 1 hour."
  },

  "Create Password Recovery(confirmation)": {
    "scope": "dart",
    "prefix": ["upRecovery", "updateRecovery"],
    "body": [
      "final ${1:response} = await account.updateRecovery(userId: '${2:unique()}', secret:'${3:secret}',password: '${4:password}',passwordAgain:'${5:password}');"
    ],
    "description": "Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the PUT /account/recovery endpoint to complete the process. The verification link sent to the user's email address is valid for 1 hour."
  },

  "Create Email Verification": {
    "scope": "dart",
    "prefix": ["emailVerification", "crEmailVerification"],
    "body": [
      "final ${1:response} = await account.createVerification(url: '${2:url}');"
    ],
    "description": "Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the userId and secret arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the userId and secret parameters. Learn more about how to complete the verification process. The verification link sent to the user's email address is valid for 7 days."
  },

  "Create Email Verification(confirmation)": {
    "scope": "dart",
    "prefix": ["emailVerificationconfirmation", "crEmailVerificationconfirm"],
    "body": [
      "final ${1:response} = await account.updateVerification(userId: '${2:unique()}',secret: '${3:secret}');"
    ],
    "description": "Use this endpoint to complete the user email verification process. Use both the userId and secret parameters that were attached to your app URL to verify the user email ownership. If confirmed this route will return a 200 status code."
  },

  "Create Phone Verification": {
    "scope": "dart",
    "prefix": ["phoneVerification", "crPhoneVerification"],
    "body": ["final ${1:response} = await account.createPhoneVerification();"],
    "description": "Use this endpoint to send a verification SMS to the currently logged in user. This endpoint is meant for use after updating a user's phone number using the accountUpdatePhone endpoint. Learn more about how to complete the verification process. The verification code sent to the user's phone number is valid for 15 minutes."
  },

  "Create Phone Verification(confirmation)": {
    "scope": "dart",
    "prefix": ["phoneVerificationconfirmation", "crPhoneVerificationconfirm"],
    "body": [
      "final ${1:response} = await account.updatePhoneVerification(userId: '${2:unique()}',secret: '${3:secret}');"
    ],
    "description": "Use this endpoint to complete the user phone verification process. Use the userId and secret that were sent to your user's phone number to verify the user email ownership. If confirmed this route will return a 200 status code."
  }
}
